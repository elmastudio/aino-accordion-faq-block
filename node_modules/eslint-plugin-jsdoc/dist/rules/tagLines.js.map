{"version":3,"sources":["../../src/rules/tagLines.js"],"names":["context","jsdoc","utils","alwaysNever","count","noEndLines","tags","options","some","tg","tagIdx","lastTag","reportIndex","source","forEach","tokens","tag","name","type","description","end","idx","slice","lines","fixer","removeTagItem","reportJSDoc","line","number","currentTag","tagSourceIdx","splice","length","push","currentTg","tagCount","defaultAlways","overrideAlways","fixCount","addLines","iterateAllJsdocs","meta","docs","url","fixable","schema","enum","additionalProperies","properties","patternProperties","additionalProperties"],"mappings":"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","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  context,\n  jsdoc,\n  utils,\n}) => {\n  const [\n    alwaysNever = 'never',\n    {\n      count = 1,\n      noEndLines = false,\n      tags = {},\n    } = {},\n  ] = context.options;\n\n  jsdoc.tags.some((tg, tagIdx) => {\n    let lastTag;\n\n    let reportIndex = null;\n    tg.source.forEach(({tokens: {tag, name, type, description, end}}, idx) => {\n      // May be text after a line break within a tag description\n      if (description) {\n        reportIndex = null;\n      }\n      if (lastTag && tags[lastTag.slice(1)]?.lines === 'always') {\n        return;\n      }\n\n      if (\n        !tag && !name && !type && !description && !end &&\n        (alwaysNever === 'never' ||\n          lastTag && tags[lastTag.slice(1)]?.lines === 'never'\n        )\n      ) {\n        reportIndex = idx;\n\n        return;\n      }\n\n      lastTag = tag;\n    });\n    if (reportIndex !== null) {\n      const fixer = () => {\n        utils.removeTagItem(tagIdx, reportIndex);\n      };\n      utils.reportJSDoc(\n        'Expected no lines between tags',\n        {line: tg.source[0].number + 1},\n        fixer,\n      );\n\n      return true;\n    }\n\n    return false;\n  });\n\n  (noEndLines ? jsdoc.tags.slice(0, -1) : jsdoc.tags).some((tg, tagIdx) => {\n    const lines = [];\n\n    let currentTag;\n    let tagSourceIdx = 0;\n    tg.source.forEach(({number, tokens: {tag, name, type, description, end}}, idx) => {\n      if (description) {\n        lines.splice(0, lines.length);\n        tagSourceIdx = idx;\n      }\n      if (tag) {\n        currentTag = tag;\n      }\n      if (!tag && !name && !type && !description && !end) {\n        lines.push({idx, number});\n      }\n    });\n\n    const currentTg = currentTag && tags[currentTag.slice(1)];\n    const tagCount = currentTg?.count;\n\n    const defaultAlways = alwaysNever === 'always' && currentTg?.lines !== 'never' &&\n      currentTg?.lines !== 'any' && lines.length < count;\n\n    let overrideAlways;\n    let fixCount = count;\n    if (!defaultAlways) {\n      fixCount = typeof tagCount === 'number' ? tagCount : count;\n      overrideAlways = currentTg?.lines === 'always' &&\n        lines.length < fixCount;\n    }\n\n    if (defaultAlways || overrideAlways) {\n      const fixer = () => {\n        utils.addLines(tagIdx, lines[lines.length - 1]?.idx || tagSourceIdx + 1, fixCount - lines.length);\n      };\n      const line = lines[lines.length - 1]?.number || tg.source[tagSourceIdx].number;\n      utils.reportJSDoc(\n        `Expected ${fixCount} line${fixCount === 1 ? '' : 's'} between tags but found ${lines.length}`,\n        {\n          line,\n        },\n        fixer,\n      );\n\n      return true;\n    }\n\n    return false;\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Enforces lines (or no lines) between tags.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-tag-lines',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        enum: ['always', 'any', 'never'],\n        type: 'string',\n      },\n      {\n        additionalProperies: false,\n        properties: {\n          count: {\n            type: 'integer',\n          },\n          noEndLines: {\n            type: 'boolean',\n          },\n          tags: {\n            properties: {\n              patternProperties: {\n                '.*': {\n                  additionalProperties: false,\n                  properties: {\n                    count: {\n                      type: 'integer',\n                    },\n                    lines: {\n                      enum: ['always', 'never'],\n                      type: 'string',\n                    },\n                  },\n                },\n              },\n            },\n            type: 'object',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"tagLines.js"}